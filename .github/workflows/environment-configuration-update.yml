name: environment-configuration-update

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select environment'
        required: true
        default: 'Dev'
        type: choice
        options:
          - Dev
          - Test
        # - Prod
        # - Custom
      gitbranch:
        description: 'Select Git Branch'
        required: true
        default: 'feature/jp-gitactions'
        type: choice
        options:
          - 'feature/jp-gitactions'
          - 'main'
      TerraformAction:
        type: choice
        description: 'Terraform With Approvals'
        required: true
        default: 'init + plan'
        options:
          - 'init+plan'
          - 'init+plan+apply'
          - 'approval+destroy'

permissions:
  id-token: write
  contents: read

env:
  REPO_NAME: "data-marketplace-infrastructure"
  BUCKET_NAME: "jpbackupbucket20250502"
  TFRUNNER_SCRIPT: "/home/ssm-user/data-marketplace-infrastructure/.github/scripts/tfrunner.sh"
  APPROVERS: "soydaner,JohnPalmerGDS,denis-davidov-gds"

jobs:
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~ 01 TerraformInitPlanOnly
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  TerraformInitPlanOnly:
    name: TerraformInitPlanOnly
    runs-on: ubuntu-latest
    if: inputs.TerraformAction == 'init+plan'

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4.2.2

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4.2.1
        with:
          role-session-name: github-actions
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: CloneGitRepoToEC2-01
        id: CloneGitRepoToEC2-01
        uses: forgedconcepts/aws-ssm-send-command-action@v1.1.1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          targets: |
            [${{ secrets.INSTANCE_ID }}]
          document-name: AWS-RunShellScript
          parameters: |
            {"commands":[
              "#!/bin/bash","if [ -d /home/ssm-user/${{ env.REPO_NAME }} ];then rm -fR /home/ssm-user/${{ env.REPO_NAME }} ; fi",
              "su - ssm-user -c \"git clone -b ${{ inputs.gitbranch }} --single-branch git@github.com:co-cddo/${{ env.REPO_NAME }}.git /home/ssm-user/${{ env.REPO_NAME }} \""
            ]}

      - name: TerraformInitiate EC2
        id: TerraformInitiateEC2
        uses: forgedconcepts/aws-ssm-send-command-action@v1.1.1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          targets: |
            [${{ secrets.INSTANCE_ID }}]
          document-name: AWS-RunShellScript
          parameters: |
            {"commands":[
              "su - ssm-user -c \"${{ env.TFRUNNER_SCRIPT }} ${{ inputs.environment }} ${{ inputs.TerraformAction }} ${{ github.job }} \""
            ]}

      - name: Get and Show PLANOUTFILE
        run: |
          aws s3 cp s3://${{ env.BUCKET_NAME }}/PLANOUTFILE.txt ./PLANOUTFILE.txt
          echo "#~~ INFO: PLANOUTFILE CONTENT START ~~~~~~~"
          cat ./PLANOUTFILE.txt
          echo "#~~ INFO: PLANOUTFILE CONTENT END ~~~~~~~~~"

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~ 02 TerraformInitPlan
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  TerraformInitPlan:
    name: TerraformInitPlan
    runs-on: ubuntu-latest
    if: inputs.TerraformAction == 'init+plan+apply'

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4.2.2

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4.2.1
        with:
          role-session-name: github-actions
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: CloneGitRepoToEC2-02
        id: CloneGitRepoToEC2-02
        uses: forgedconcepts/aws-ssm-send-command-action@v1.1.1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          targets: |
            [${{ secrets.INSTANCE_ID }}]
          document-name: AWS-RunShellScript
          parameters: |
            {"commands":[
              "#!/bin/bash","if [ -d /home/ssm-user/${{ env.REPO_NAME }} ];then rm -fR /home/ssm-user/${{ env.REPO_NAME }} ; fi",
              "su - ssm-user -c \"git clone -b ${{ inputs.gitbranch }} --single-branch git@github.com:co-cddo/${{ env.REPO_NAME }}.git /home/ssm-user/${{ env.REPO_NAME }} \""
            ]}

      - name: TerraformInitiate EC2
        id: TerraformInitiateEC2
        uses: forgedconcepts/aws-ssm-send-command-action@v1.1.1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          targets: |
            [${{ secrets.INSTANCE_ID }}]
          document-name: AWS-RunShellScript
          parameters: |
            {"commands":[
              "su - ssm-user -c \"${{ env.TFRUNNER_SCRIPT }} ${{ inputs.environment }} ${{ inputs.TerraformAction }} ${{ github.job }} \""
            ]}

      - name: Get and Show PLANOUTFILE
        run: |
          aws s3 cp s3://${{ env.BUCKET_NAME }}/PLANOUTFILE.txt ./PLANOUTFILE.txt
          echo "#~~ INFO: PLANOUTFILE CONTENT START ~~~~~~~"
          cat ./PLANOUTFILE.txt
          echo "#~~ INFO: PLANOUTFILE CONTENT END ~~~~~~~~~"

#~~~~~~~~~~~~~~~~~~~~~~~
#~~ 02b Manual Approval For Apply
#~~~~~~~~~~~~~~~~~~~~~~~

  manual-approval-for-apply:
    name: Manual Approval For Apply
    runs-on: ubuntu-latest
    needs: ["TerraformInitPlan"]
    if: success() && inputs.TerraformAction == 'init+plan+apply'

    permissions:
      issues: write

    steps:
      - name: Await Manual Approval
        uses: trstringer/manual-approval@v1.10.0
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ env.APPROVERS  }}
          minimum-approvals: 1
          issue-title: "Manual Approval Required for Terraform APPLY"
          issue-body: "Please approve or deny the deployment."

  TerraformApply:
    name: TerraformApply
    runs-on: ubuntu-latest
    needs: ["manual-approval-for-apply"]
    if: inputs.TerraformAction == 'init+plan+apply'
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4.2.2

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4.2.1
        with:
          role-session-name: github-actions2
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: TerraformApply EC2
        uses: forgedconcepts/aws-ssm-send-command-action@v1.1.1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          targets: |
            [${{ secrets.INSTANCE_ID }}]
          document-name: AWS-RunShellScript
          parameters: |
            {"commands":[
              "su - ssm-user -c \"${{ env.TFRUNNER_SCRIPT }} ${{ inputs.environment }} ${{ inputs.TerraformAction }} ${{ github.job }} \""
            ]}

      - name: Get and Show APPLYLOG
        run: |
          aws s3 cp s3://${{ env.BUCKET_NAME }}/APPLYLOG.txt ./APPLYLOG.txt
          echo "#~~ INFO: APPLYLOG CONTENT START ~~~~~~~"
          cat ./APPLYLOG.txt
          echo "#~~ INFO: APPLYLOG CONTENT END ~~~~~~~~~"

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~ 03 Manual Approval + Destroy
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

  manual-approval-for-destroy:
    name: Manual Approval For Destroy
    runs-on: ubuntu-latest
    if: inputs.TerraformAction == 'approval+destroy'

    permissions:
      issues: write

    steps:
      - name: Await Manual Approval
        uses: trstringer/manual-approval@v1.10.0
        with:
          secret: ${{ github.TOKEN }}
          approvers: ${{ env.APPROVERS  }}
          minimum-approvals: 1
          issue-title: "Manual Approval Required for Terraform DESTROY"
          issue-body: "Please approve or deny the destroy."


  TerraformDestroy:
    name: TerraformDestroy
    runs-on: ubuntu-latest
    if: inputs.TerraformAction == 'approval+destroy'
    needs: ["manual-approval-for-destroy"]
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4.2.2

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4.2.1
        with:
          role-session-name: github-actions2
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: CloneGitRepoToEC2-03
        id: CloneGitRepoToEC2-03
        uses: forgedconcepts/aws-ssm-send-command-action@v1.1.1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          targets: |
            [${{ secrets.INSTANCE_ID }}]
          document-name: AWS-RunShellScript
          parameters: |
            {"commands":[
              "#!/bin/bash","if [ -d /home/ssm-user/${{ env.REPO_NAME }} ];then rm -fR /home/ssm-user/${{ env.REPO_NAME }} ; fi",
              "su - ssm-user -c \"git clone -b ${{ inputs.gitbranch }} --single-branch git@github.com:co-cddo/${{ env.REPO_NAME }}.git /home/ssm-user/${{ env.REPO_NAME }} \""
            ]}

      - name: TerraformApply EC2
        uses: forgedconcepts/aws-ssm-send-command-action@v1.1.1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          targets: |
            [${{ secrets.INSTANCE_ID }}]
          document-name: AWS-RunShellScript
          parameters: |
            {"commands":[
              "su - ssm-user -c \"${{ env.TFRUNNER_SCRIPT }} ${{ inputs.environment }} ${{ inputs.TerraformAction }} ${{ github.job }} \""
            ]}

      - name: Get and Show DESTROYLOG
        run: |
          aws s3 cp s3://${{ env.BUCKET_NAME }}/DESTROYLOG.txt ./DESTROYLOG.txt
          echo "#~~ INFO: DESTROYLOG CONTENT START ~~~~~~~"
          cat ./DESTROYLOG.txt
          echo "#~~ INFO: DESTROYLOG CONTENT END ~~~~~~~~~"
