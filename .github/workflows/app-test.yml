name: App Test Tests

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Select environment"
        required: true
        default: "Dev"
        type: choice
        options:
          - Dev
          - Test
          - Prod
          - Custom
      custom_url:
        description: 'Custom URL (if "Custom" selected)'
        required: false
        default: ""
      token:
        description: "Manual JWT token (CO-Datamarketplace cookie)"
        required: true
      authCookie:
        description: "Manual auth token (.AspNetCore.Cookies cookie)"
        required: true

permissions:
  id-token: write
  contents: write

env:
  AWS_REGION: eu-west-2
  DEV_URL: https://dev.datamarketplace.gov.uk/
  TEST_URL: https://test.datamarketplace.gov.uk/
  PROD_URL: https://www.datamarketplace.gov.uk/

jobs:
  e2e:
    runs-on: ubuntu-latest
    # --- NEW: Define the container for this job ---
    container:
      image: e2e-tests # Use the image built in the previous step
      options: >
        --user root
        -v ${{ github.workspace }}/screenshots:/app-test/screenshots
        -e BASE_URL=${{ env.BASE_URL }}
        -e TOKEN="${{ github.event.inputs.token }}"
        -e AUTH_COOKIE="${{ github.event.inputs.authCookie }}"
    # --- END NEW ---
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        # IMPORTANT: When using a 'container' in a job, 'actions/checkout'
        # checks out the code *into* the container's working directory.
        # So, your /app-test will be populated.

      - name: Set BASE_URL
        id: set-url
        run: |
          case "${{ github.event.inputs.environment }}" in
            Dev) echo "BASE_URL=${{ env.DEV_URL }}" >> $GITHUB_ENV ;;
            Test) echo "BASE_URL=${{ env.TEST_URL }}" >> $GITHUB_ENV ;;
            Prod) echo "BASE_URL=${{ env.PROD_URL }}" >> $GITHUB_ENV ;;
            Custom)
              if [[ -z "${{ github.event.inputs.custom_url }}" ]]; then
                echo "Custom URL is required when environment is Custom" && exit 1
              fi
              echo "BASE_URL=${{ github.event.inputs.custom_url }}" >> $GITHUB_ENV
              ;;
          esac

      - name: Set AWS variables
        id: aws-vars
        run: |
          ENV="${{ github.event.inputs.environment }}"

          declare -A ENV_ACCOUNT_TYPE=(
            ["Dev"]="DEV"
            ["Test"]="DEV"
            ["Prod"]="PROD"
            ["Custom"]="DEV"
          )

          declare -A ACCOUNT_IDS=(
            ["DEV"]="855859226163"
            ["PROD"]="855859226163"
          )

          declare -A ROLES
          for ACCOUNT_TYPE in "${!ACCOUNT_IDS[@]}"; do
            ROLES[$ACCOUNT_TYPE]="arn:aws:iam::${ACCOUNT_IDS[$ACCOUNT_TYPE]}:role/ECRContainerPush"
          done

          ACCOUNT_TYPE="${ENV_ACCOUNT_TYPE[$ENV]}"
          AWS_ACCOUNT_ID="${ACCOUNT_IDS[$ACCOUNT_TYPE]}"
          ROLE_TO_ASSUME="${ROLES[$ACCOUNT_TYPE]}"

          echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
          echo "ROLE_TO_ASSUME=$ROLE_TO_ASSUME" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      # --- NEW/MODIFIED STEPS ---
      - name: Build Docker image
        run: docker build -t e2e-tests ./app-test
        # We still need to build the image on the host.
        # This image will then be used by the 'container' property of the job.

      - name: Create screenshots directory on host
        run: mkdir -p screenshots
        # This ensures the directory exists on the GitHub Actions runner before the Docker mount.

      - name: Debug - Inside container before tests
        run: |
          set -eux
          echo '--- Inside Docker Container: Before Playwright tests ---'
          echo 'Current working directory: $(pwd)'
          echo 'Contents of /app-test:'
          ls -la /app-test
          echo 'Contents of /app-test/screenshots (should be empty or non-existent initially):'
          ls -la /app-test/screenshots || true
          mkdir -p /app-test/screenshots # Ensure directory exists inside container

      - name: Run E2E tests inside Docker container
        run: npm run test
        # This command now runs directly within the 'e2e-tests' container.

      - name: Debug - Inside container after tests
        run: |
          set -eux
          echo '--- Inside Docker Container: After Playwright tests ---'
          echo 'Contents of /app-test/screenshots (should now contain screenshots):'
          ls -la /app-test/screenshots
          echo 'Contents of /app-test:'
          ls -la /app-test

      - name: Debug - List screenshots on host after Docker run
        run: |
          echo "Checking screenshots folder contents on host after Docker run..."
          # This command checks the directory on the GitHub Actions runner (host).
          # If the volume mount worked, you should see your screenshots here.
          ls -la ./screenshots

      - name: Upload screenshots to S3
        if: always()
        run: |
          NOW=$(date +"%Y-%m-%d_%H-%M-%S")
          TARGET="s3://dm-fast-assets/tests/$NOW/"
          echo "Uploading screenshots to $TARGET"
          aws s3 cp ./screenshots "$TARGET" --recursive --debug --no-empty-source
